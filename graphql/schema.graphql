"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2018-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A custom scalar type to represent a portfolio category"
scalar PortfolioCategory @scalar(class: "App\\GraphQL\\Scalars\\PortfolioCategoryType")

"Currency codes supported by the application"
enum Currency {
    EUR
    RON
}

"Risk levels for mutual funds"
enum MutualFundRisk {
    LOW @enum(value: "low")
    MEDIUM @enum(value: "medium")
    HIGH @enum(value: "high")
}

##############
# QUERY TYPE #
##############

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Returns logged in user."
    currentUser: User @auth

    "Returns user by ID or email."
    user(
        "Search by entity ID."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @can(ability: "access-admin")

    "Returns users paginated."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10) @can(ability: "access-admin")

    "Returns bank by ID or name."
    bank(
        "Search by entity ID."
        id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])
        "Search by bank name."
        name: String @like(key: "name", template: "%{}%") @rules(apply: ["prohibits:id", "required_without:id"])
    ): Bank @first

    "Returns all banks."
    banks: [Bank!]! @all

    "Returns asset manager by ID or name."
    assetManager(
        "Search by entity ID."
        id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])
        "Search by asset manager name."
        name: String @like(key: "name", template: "%{}%") @rules(apply: ["prohibits:id", "required_without:id"])
    ): AssetMgmtCompany @first

    "Returns all asset managers."
    assetManagers: [AssetMgmtCompany!]! @all

    searchMutualFunds(
        criteria: MutualFundSearchCriteria!
    ): [MutualFund!]! @field(resolver: "SearchMutualFunds")

    "Returns state bond emissions by year and/or month of maturity."
    stateBondsByMaturity(
        "Filter by year of maturity."
        maturityYear: Int! @rules(apply: ["required_with:maturityMonth"])
        "(Optional) Filter also by month of maturity."
        maturityMonth: Int
    ): [StateBondEmission!]! @field(resolver: "StateBondsByMaturity")

    "Returns state bond emissions paginated."
    stateBonds: [StateBondEmission!]! @paginate(defaultCount: 10)
}


#################
# MUTATION TYPE #
#################
"Indicates what fields are available at the top level of a mutation operation."
type Mutation {
    "Creates a new bank deposit in a given bank and for a given user."
    createBankDeposit(input: CreateBankDepositInput!): BankDeposit! @field(resolver: "CreateBankDeposit") @can(ability: "access-admin")
    "Creates a new mutual fund investment for a given user."
    createMutualFundInvestment(input: MutualFundInvestmentInput!): MutualFundInvestment @field(resolver: "CreateMutualFundInvestment") @can(ability: "access-admin")
    "Creates a new state bond investment for a given user."
    createStateBondInvestment(input: StateBondInvestmentInput!): StateBondInvestment @field(resolver: "CreateStateBondInvestment") @can(ability: "access-admin")
}


###################
# NON-MODEL TYPES #
###################
type PortfolioTotal {
    total: Float!
    currency: Currency!
}

type PortfolioCategoryTotal {
    total: Float!
    portfolioCategory: PortfolioCategory!
    currency: Currency!
}


###############
# UNION TYPES #
###############

union PortfolioItem = BankAccount | BankDeposit | MutualFundInvestment | StateBondInvestment


###############
# MODEL TYPES #
###############

"Account of a person who utilizes this application."
type User {
    "User's bank current accounts"
    bankAccounts: [BankAccount!]! @hasMany
    "User's bank deposits"
    bankDeposits: [BankDeposit!]! @hasMany
    "User's investments into mutual funds"
    mutualFundInvestments: [MutualFundInvestment!]! @hasMany
    "User's investments into state bonds"
    stateBondInvestments: [StateBondInvestment!]! @hasMany

    id: ID!
    "Non-unique name."
    name: String!
    "Unique email address."
    email: String!

    "Collects all user's portfolio items in one collection"
    portfolioItems:  [PortfolioItem!]! @field(resolver: "PortfolioItems")
    "Aggregates user's wealth into one total"
    portfolioTotal(currency: Currency! = RON): PortfolioTotal @field(resolver: "PortfolioTotal")
    "Aggregates user's wealth into categorized totals"
    portfolioCategoriesTotals(currency: Currency! = RON) : [PortfolioCategoryTotal!]! @field(resolver: "PortfolioCategoriesTotals")
}

type Bank {
    accounts: [BankAccount!]! @hasMany @guard
    deposits: [BankDeposit!]! @hasMany @guard

    id: ID!
    "The name of the bank"
    name: String!
}

type BankAccount {
    "The bank where the account is opened"
    bank: Bank! @belongsTo
    "The application user that is the account owner"
    owner: User! @belongsTo

    id: ID!
    "The current account currency"
    currency: Currency!
    "Account amount excluding the given currency"
    amount: Float!
    iban: String!
}

type BankDeposit {
    "The bank where the account is opened"
    bank: Bank! @belongsTo
    "The application user that is the account owner"
    owner: User! @belongsTo

    id: ID!
    "The deposit currency"
    currency: Currency!
    "Deposited amount excluding the given currency"
    depositAmount: Float!
    "The interest rate represented as percentage"
    interestRate: Float!
    "When the deposit was created"
    openingDate: Date!
    "When the deposit will reach maturity"
    maturityDate: Date!
    "Whether the deposit will be renewed automatically at maturity"
    isRevolving: Boolean!
    "Whether the accumulated interest will be added to the new deposit"
    isCapitalized: Boolean
}

type AssetMgmtCompany {
    "The mutual funds that the asset manager offers"
    mutualFunds: [MutualFund!]! @hasMany

    id: ID!
    name: String!
}

type MutualFund {
    "The asset manager that orchestrates the mutual fund"
    assetMgmtCompany: AssetMgmtCompany! @belongsTo
    "The individual investments into the mutual fund"
    investments: [MutualFundInvestment!]! @hasMany @guard

    id: ID!
    name: String!
    "The currency in which investors contribute to the fund"
    currency: Currency!
    "The current fund unit net value"
    unitValue: Float!
    riskIndicator: MutualFundRisk!
}

"An individual mutual fund investment made by an investor"
type MutualFundInvestment {
    "The mutual fund the investment refers to"
    mutualFund: MutualFund! @belongsTo
    "The investor represented by a user"
    investor: User! @belongsTo

    id: ID!
    unitCount: Float!
    unitValue: Float!
    investmentDate: Date!

    "The current value of the investment taking into consideration today's fund unit value"
    currentValue: Float! @field(resolver: "CurrentValue")
}

"An emission round of state bonds"
type StateBondEmission {
    subscriptions: [StateBondInvestment!]! @hasMany(relation: "investments") @guard

    id: ID!
    name: String!
    currency: Currency!
    couponRate: Float!
    unitValue: Float!
    maturityDate: Date!
}

"An individual state bond investment made by an investor"
type StateBondInvestment {
    "The state bond emission the investment refers to"
    emission: StateBondEmission! @belongsTo
    "The investor represented by a user"
    investor: User! @belongsTo

    id: ID!
    principal: Float!
    unitCount: Int!
    unitValue: Float!
}


###############
# INPUT TYPES #
###############

# For querying

input AssetMgmtSearchCriteria {
    id: ID
    name: String
}

input MutualFundSearchCriteria {
    assetManager: AssetMgmtSearchCriteria
    currency: Currency
    riskIndicator: MutualFundRisk
}

# For mutations

input CreateBankDepositInput {
    bankId: ID!
    ownerId: ID!

    currency: Currency!
    depositAmount: Float!
    interestRate: Float!
    openingDate: Date!
    maturityDate: Date!
    isRevolving: Boolean!
    isCapitalized: Boolean
}

input MutualFundInvestmentInput {
    mutualFundId: ID!
    investorId: ID!

    unitCount: Float!
    unitValue: Float!
    investmentDate: Date!
}

input StateBondInvestmentInput {
    emissionId: ID!
    investorId: ID!

    unitCount: Int!
    unitValue: Float!
}
